{"version":3,"sources":["../../src/index.tsx","screens/OrderScreen.jsx"],"names":["PayPalButton","isSdkReady","window","this","props","data","actions","currency","options","amount","shippingPreference","purchase_units","currency_code","value","application_context","shipping_preference","onSuccess","createOrder","createSubscription","onApprove","style","Button","React","ReactDOM","createOrderFn","undefined","onButtonReady","queryParams","Object","k","name","script","document","Error","Component","PropTypes","catchError","onError","clientId","merchantId","intent","commit","vault","component","disableFunding","disableCard","integrationDate","locale","buyerCountry","debug","func","OrderScreen","match","history","orderId","params","id","dispatch","useDispatch","orderDetails","useSelector","state","order","loading","error","userInfo","userLogin","useState","sdkReady","setSDKReady","orderPay","loadingPay","successPay","success","orderDeliver","loadingDeliver","successDeliver","useEffect","getOrderDetails","push","addPayPalScript","a","axios","get","createElement","type","src","async","onload","body","appendChild","ORDER_PAY_RESET","ORDER_DELIVER_RESET","isPaid","paypal","variant","_id","md","Item","user","href","email","shippingAddress","address","city","postalCode","country","isDelivered","deliveredAt","paymentMethod","paidAt","orderItems","length","map","item","image","alt","fluid","rounded","to","product","qty","price","toLocaleString","Number","itemsPrice","shippingPrice","taxPrice","totalPrice","paymentResult","payOrder","isAdmin","className","onClick","deliverOrder"],"mappings":"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","file":"static/js/6.8a5aebb9.chunk.js","sourcesContent":["import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport PropTypes from \"prop-types\";\n\ndeclare global {\n    interface Window { paypal: any }\n}\n\nexport interface PayPalButtonProps {\n    amount?: number|string,\n    currency?: number|string,\n    shippingPreference?: \"NO_SHIPPING\" | \"GET_FROM_FILE\" | \"SET_PROVIDED_ADDRESS\",\n    onSuccess?: Function,\n    catchError?: Function,\n    onError?: Function,\n    createOrder?: Function,\n    createSubscription?: Function,\n    onApprove?: Function,\n    style?: object,\n    options?: PaypalOptions,\n    onButtonReady?: Function,\n}\n\nexport interface PayPalButtonState {\n    isSdkReady: boolean\n}\n\nexport interface PaypalOptions {\n    clientId?: string,\n    merchantId?: string,\n    currency?: number|string,\n    intent?: string,\n    commit?: boolean|string,\n    vault?: boolean|string,\n    component?: string,\n    disableFunding?: string,\n    disableCard?: string,\n    integrationDate?: string,\n    locale?: string,\n    buyerCountry?: string,\n    debug?: boolean|string\n}\n\nclass PayPalButton extends React.Component<PayPalButtonProps, PayPalButtonState> {\n    static propTypes = {\n        amount: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string,\n        ]),\n        currency: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string,\n        ]),\n        shippingPreference: PropTypes.string,\n        onSuccess: PropTypes.func,\n        catchError: PropTypes.func,\n        onError: PropTypes.func,\n        createOrder: PropTypes.func,\n        createSubscription: PropTypes.func,\n        onApprove: PropTypes.func,\n        style: PropTypes.object,\n        options: PropTypes.shape({\n            clientId: PropTypes.string,\n            merchantId: PropTypes.string,\n            currency: PropTypes.oneOfType([\n                PropTypes.number,\n                PropTypes.string,\n            ]),\n            intent: PropTypes.string,\n            commit: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.string\n            ]),\n            vault: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.string\n            ]),\n            component: PropTypes.string,\n            disableFunding: PropTypes.string,\n            disableCard: PropTypes.string,\n            integrationDate: PropTypes.string,\n            locale: PropTypes.string,\n            buyerCountry: PropTypes.string,\n            debug: PropTypes.oneOfType([\n                PropTypes.bool,\n                PropTypes.string\n            ])\n        }),\n        onButtonReady: PropTypes.func,\n    }\n\n    static defaultProps = {\n        style: {},\n        options: {\n            clientId: \"sb\",\n            currency: \"USD\"\n        },\n        shippingPreference: \"GET_FROM_FILE\",\n    }\n\n    constructor(props: PayPalButtonProps) {\n        super(props);\n\n        this.state = {\n            isSdkReady: false,\n        };\n    }\n\n    componentDidMount() {\n        if (\n            typeof window !== \"undefined\" &&\n            window !== undefined &&\n            window.paypal === undefined\n        ) {\n            this.addPaypalSdk();\n        }\n        else if (\n            typeof window !== \"undefined\" &&\n            window !== undefined &&\n            window.paypal !== undefined &&\n            this.props.onButtonReady\n        ) {\n            this.props.onButtonReady();\n        }\n    }\n\n    createOrder(data: any, actions: any) {\n\n        const { currency, options, amount, shippingPreference } = this.props;\n\n        return actions.order.create({\n          purchase_units: [\n            {\n              amount: {\n                currency_code: currency\n                  ? currency\n                  : options && options.currency\n                  ? options.currency\n                  : \"USD\",\n                value: amount.toString()\n              }\n            }\n          ],\n          application_context: {\n            shipping_preference: shippingPreference\n          }\n        });\n    }\n\n    onApprove(data: any, actions: any) {\n        return actions.order\n            .capture()\n            .then((details) => {\n                if (this.props.onSuccess) {\n                    return this.props.onSuccess(details, data);\n                }\n            })\n            .catch((err) => {\n                if (this.props.catchError) {\n                    return this.props.catchError(err);\n                }\n            });\n    }\n\n    render() {\n        const {\n            amount,\n            onSuccess,\n            createOrder,\n            createSubscription,\n            onApprove,\n            style,\n        } = this.props;\n        const { isSdkReady } = this.state;\n\n        if (\n            !isSdkReady &&\n            (typeof window === \"undefined\" || window.paypal === undefined)\n        ) {\n            return null;\n        }\n\n        const Button = window.paypal.Buttons.driver(\"react\", {\n            React,\n            ReactDOM,\n        });\n\n        const createOrderFn =\n            amount && !createOrder\n                ? (data: any, actions: any) => this.createOrder(data, actions)\n                : (data: any, actions: any) => createOrder(data, actions);\n\n        return (\n            <Button\n                {...this.props}\n                createOrder={createSubscription ? undefined : createOrderFn}\n                createSubscription={createSubscription}\n                onApprove={\n                    onSuccess\n                        ? (data: any, actions: any) => this.onApprove(data, actions)\n                        : (data: any, actions: any) => onApprove(data, actions)\n                }\n                style={style}\n            />\n        );\n    }\n\n    private addPaypalSdk() {\n        const { options, onButtonReady } = this.props;\n        const queryParams: string[] = [];\n\n        // replacing camelCase with dashes\n        Object.keys(options).forEach(k => {\n            const name = k.split(/(?=[A-Z])/).join(\"-\").toLowerCase();\n            queryParams.push(`${name}=${options[k]}`);\n        });\n\n        const script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = `https://www.paypal.com/sdk/js?${queryParams.join(\"&\")}`;\n        script.async = true;\n        script.onload = () => {\n            this.setState({ isSdkReady: true });\n\n            if (onButtonReady) {\n                onButtonReady();\n            }\n        };\n        script.onerror = () => {\n            throw new Error(\"Paypal SDK could not be loaded.\");\n        };\n    \n        document.body.appendChild(script);\n    }\n}\n\nexport { PayPalButton };\n","import React, { useEffect, useState } from \"react\";\nimport { PayPalButton } from \"react-paypal-button-v2\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Row, Col, ListGroup, Image, Card, Button } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { getOrderDetails, payOrder, deliverOrder } from \"../actions/orderActions\";\nimport { ORDER_PAY_RESET, ORDER_DELIVER_RESET } from \"../constants/orderConstants\";\nimport Loader from \"../components/Loader\";\n\nimport Message from \"../components/Message\";\n\nconst OrderScreen = ({ match, history }) => {\n  const orderId = match.params.id;\n  const dispatch = useDispatch();\n\n  const orderDetails = useSelector((state) => state.orderDetails);\n  const { order, loading, error } = orderDetails;\n\n  const userLogin = useSelector((state) => state.userLogin);\n  const { userInfo } = userLogin;\n\n  const [sdkReady, setSDKReady] = useState(false);\n\n  const orderPay = useSelector((state) => state.orderPay);\n  const { loading: loadingPay, success: successPay } = orderPay;\n\n  const orderDeliver = useSelector((state) => state.orderDeliver);\n  const { loading: loadingDeliver, success: successDeliver } = orderDeliver;\n\n  useEffect(() => {\n    dispatch(getOrderDetails(orderId));\n  }, [dispatch, orderId]);\n\n  useEffect(() => {\n    if (!userInfo) {\n      history.push(\"/login\");\n    }\n    const addPayPalScript = async () => {\n      const { data: clientId } = await axios.get(\"/api/config/paypal\");\n      const script = document.createElement(\"script\");\n      script.type = \"text/javascript\";\n      script.src = `https://www.paypal.com/sdk/js?client-id=${clientId}`;\n      script.async = true;\n      script.onload = () => {\n        setSDKReady(true);\n      };\n      document.body.appendChild(script);\n    };\n\n    if (!order || successPay || successDeliver) {\n      dispatch({ type: ORDER_PAY_RESET });\n      dispatch({ type: ORDER_DELIVER_RESET });\n      dispatch(getOrderDetails(orderId));\n    } else if (!order.isPaid) {\n      if (!window.paypal) {\n        addPayPalScript();\n      } else {\n        setSDKReady(true);\n      }\n    }\n  }, [dispatch, orderId, successPay, order, successDeliver, history, userInfo]);\n\n  const successPaymentHandler = (paymentResult) => {\n    dispatch(payOrder(orderId, paymentResult));\n  };\n\n  const deliverHandler = () => {\n    dispatch(deliverOrder(order));\n  };\n  return loading ? (\n    <Loader />\n  ) : error ? (\n    <Message variant='danger'>{error}</Message>\n  ) : (\n    <>\n      <h1>Order: {order._id}</h1>\n      <Row>\n        <Col md={8}>\n          <ListGroup variant='flush'>\n            <ListGroup.Item>\n              <h2>Shipping</h2>\n              <strong>Name: </strong>\n              {order.user.name}\n              <br></br>\n              <a href={`mailto:${order.user.email}`}>Email: {order.user.email}</a>\n              <p>\n                <strong>Address: </strong>\n                {order.shippingAddress.address}, {order.shippingAddress.city}, {order.shippingAddress.postalCode},{\" \"}\n                {order.shippingAddress.country}\n              </p>\n              {order.isDelivered ? (\n                <Message variant='success'>Delivered on {order.deliveredAt}</Message>\n              ) : (\n                <Message variant='danger'>Not Devlivered</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2> Payment Method</h2>\n              <p>\n                <strong> Method: </strong>\n                {order.paymentMethod}\n              </p>\n              {order.isPaid ? (\n                <Message variant='success'>Paid on {order.paidAt}</Message>\n              ) : (\n                <Message variant='danger'>Not Paid</Message>\n              )}\n            </ListGroup.Item>\n\n            <ListGroup.Item>\n              <h2>Order Items</h2>\n              {order.orderItems.length === 0 ? (\n                <Message>No Order</Message>\n              ) : (\n                <ListGroup variant='flush'>\n                  {order.orderItems.map((item) => (\n                    <ListGroup.Item key={item.product}>\n                      <Row>\n                        <Col md={1}>\n                          <Image src={item.image} alt={item.name} fluid rounded></Image>\n                        </Col>\n                        <Col>\n                          <Link to={`/product/${item.product}`}>{item.name}</Link>\n                        </Col>\n                        <Col md={4}>\n                          {item.qty} x&ensp;$ {item.price.toLocaleString(\"en-US\")}\n                          <br></br>\n                          <strong>Total:</strong>\n                          {(item.qty * item.price).toLocaleString(\"en-US\")}\n                        </Col>\n                      </Row>\n                    </ListGroup.Item>\n                  ))}\n                </ListGroup>\n              )}\n            </ListGroup.Item>\n          </ListGroup>\n        </Col>\n        <Col md={4}>\n          <Card>\n            <ListGroup variant='flush'>\n              <ListGroup.Item>\n                <h2>Order Summary</h2>\n              </ListGroup.Item>\n\n              <ListGroup.Item>\n                <Row>\n                  <Col>Items</Col>\n                  <Col>$ {Number(order.itemsPrice).toLocaleString(\"en-US\")}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Shipping</Col>\n\n                  <Col>$ {Number(order.shippingPrice).toLocaleString(\"en-US\")}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Tax</Col>\n                  <Col>$ {Number(order.taxPrice).toLocaleString(\"en-US\")}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>\n                <Row>\n                  <Col>Total</Col>\n                  <Col>$ {Number(order.totalPrice).toLocaleString(\"en-US\")}</Col>\n                </Row>\n              </ListGroup.Item>\n              <ListGroup.Item>{error && <Message variant='danger'>{error}</Message>}</ListGroup.Item>\n\n              {!order.isPaid && (\n                <ListGroup.Item>\n                  {loadingPay && <Loader />}\n                  {!sdkReady ? (\n                    <Loader />\n                  ) : (\n                    <PayPalButton amount={order.totalPrice} onSuccess={successPaymentHandler}></PayPalButton>\n                  )}\n                </ListGroup.Item>\n              )}\n\n              {loadingDeliver && <Loader />}\n\n              {userInfo && userInfo.isAdmin && order.isPaid && !order.isDelivered && (\n                <ListGroup.Item>\n                  <Button type='button' className='btn btn-block' onClick={deliverHandler}>\n                    Mark As Delivered\n                  </Button>\n                </ListGroup.Item>\n              )}\n            </ListGroup>\n          </Card>\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default OrderScreen;\n"],"sourceRoot":""}