{"version":3,"sources":["screens/ProductEditScreen.jsx"],"names":["ProductEditScreen","match","history","productId","params","id","useState","name","setName","price","setPrice","image","setImage","brand","setBrand","category","setcategory","countInStock","setcountInStock","Description","setDescription","uploading","setUploading","dispatch","useDispatch","useSelector","state","productDetails","loading","error","product","productUpdate","loadingUpdate","errorUpdate","successUpdate","success","useEffect","type","PRODUCT_UPDATE_RESET","push","_id","description","listProductDetails","uploadFileHandler","e","a","file","target","files","formData","FormData","append","config","headers","axios","post","data","console","log","to","className","variant","onSubmit","preventDefault","updateProduct","Group","controlId","Label","Control","placeholder","value","onChange","src","fluid","style","width","label","custom"],"mappings":"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","file":"static/js/8.904229c1.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport { Link } from \"react-router-dom\";\nimport { Form, Button, Image } from \"react-bootstrap\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport Message from \"../components/Message\";\nimport Loader from \"../components/Loader\";\nimport { listProductDetails, updateProduct } from \"../actions/productActions\";\nimport FormContainer from \"../components/FormContainer\";\nimport { PRODUCT_UPDATE_RESET } from \"../constants/productConstats\";\n\nconst ProductEditScreen = ({ match, history }) => {\n  const productId = match.params.id;\n  const [name, setName] = useState(\"\");\n  const [price, setPrice] = useState(\"\");\n  const [image, setImage] = useState(\"\");\n  const [brand, setBrand] = useState(\"\");\n  const [category, setcategory] = useState(\"\");\n  const [countInStock, setcountInStock] = useState(0);\n  const [Description, setDescription] = useState(\"\");\n  const [uploading, setUploading] = useState(false);\n\n  const dispatch = useDispatch();\n  const { loading, error, product } = useSelector((state) => state.productDetails);\n\n  const {\n    loading: loadingUpdate,\n    error: errorUpdate,\n    success: successUpdate,\n  } = useSelector((state) => state.productUpdate);\n\n  useEffect(() => {\n    if (successUpdate) {\n      dispatch({ type: PRODUCT_UPDATE_RESET });\n      history.push(\"/admin/productlist\");\n    } else {\n      if (!product || !product.name || product._id !== productId) {\n        dispatch(listProductDetails(productId));\n      } else {\n        setName(product.name);\n        setImage(product.image);\n        setPrice(product.price);\n        setcategory(product.category);\n        setBrand(product.brand);\n        setcountInStock(product.countInStock);\n        setDescription(product.description);\n      }\n    }\n  }, [successUpdate, product, dispatch, productId, history]);\n\n  const submitHandler = (e) => {\n    e.preventDefault();\n    //update Product\n    dispatch(\n      updateProduct({\n        _id: productId,\n        name,\n        price,\n        image,\n        brand,\n        category,\n        countInStock,\n        description: Description,\n      }),\n    );\n  };\n\n  const uploadFileHandler = async (e) => {\n    const file = e.target.files[0];\n    const formData = new FormData();\n    formData.append(\"image\", file);\n    setUploading(true);\n    try {\n      const config = {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\",\n        },\n      };\n\n      const { data } = await axios.post(\"/api/upload\", formData, config);\n\n      setImage(data);\n      setUploading(false);\n    } catch (error) {\n      console.log(error);\n      setUploading(false);\n    }\n  };\n\n  return (\n    <>\n      <Link to='/admin/userlist' className='btn btn-light my-3'>\n        Go Back\n      </Link>\n\n      <FormContainer>\n        <h1> Edit Product</h1>\n\n        {loadingUpdate && <Loader />}\n        {errorUpdate && <Message variant='danger'>{errorUpdate}</Message>}\n\n        {loading ? (\n          <Loader />\n        ) : error ? (\n          <Message variant='danger'>{error}</Message>\n        ) : (\n          <Form onSubmit={submitHandler}>\n            <Form.Group controlId='name'>\n              <Form.Label>Enter product Name</Form.Label>\n              <Form.Control\n                type='name'\n                placeholder='Product name'\n                value={name}\n                onChange={(e) => setName(e.target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='price'>\n              <Form.Label>price </Form.Label>\n              <Form.Control\n                type='price'\n                placeholder='price '\n                value={price}\n                onChange={(e) => setPrice(e.target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='Image'>\n              <Form.Label>Product Image </Form.Label>\n              <br></br>\n              <Image src={image} fluid style={{ width: \"100px\" }} />\n              <br></br>\n              <Form.Control\n                type='text'\n                placeholder='Image'\n                value={`Image File Path: ${image}`}\n                onChange={(e) => setImage(e.target.value)}\n              />{\" \"}\n              <Form.Control type='file' label='Choose File' custom onChange={uploadFileHandler} />\n              {uploading && <Loader />}\n            </Form.Group>\n\n            <Form.Group controlId='brand'>\n              <Form.Label>Brand </Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter Brand '\n                value={brand}\n                onChange={(e) => setBrand(e.target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='countInStock'>\n              <Form.Label>Count In Stock </Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Count In Stock'\n                value={countInStock}\n                onChange={(e) => setcountInStock(e.target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='category'>\n              <Form.Label>Category </Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter Category '\n                value={category}\n                onChange={(e) => setcategory(e.target.value)}></Form.Control>\n            </Form.Group>\n\n            <Form.Group controlId='Description'>\n              <Form.Label>Description </Form.Label>\n              <Form.Control\n                type='text'\n                placeholder='Enter Description '\n                value={Description}\n                onChange={(e) => setDescription(e.target.value)}></Form.Control>\n            </Form.Group>\n\n            <Button type='submit' variant='primary'>\n              Update\n            </Button>\n          </Form>\n        )}\n      </FormContainer>\n    </>\n  );\n};\n\nexport default ProductEditScreen;\n"],"sourceRoot":""}